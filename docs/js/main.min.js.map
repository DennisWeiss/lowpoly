{"version":3,"sources":["main.js"],"names":["point","drawBG","context","canvas","clearRect","cvs","width","height","globalCompositeOperation","bg","createLinearGradient","inputs","document","getElementById","getElementsByTagName","i","length","addColorStop","value","console","log","colours","fillStyle","beginPath","fillRect","closePath","fill","bg2","ctx2","imgd","getImageData","data","saveImage","dataURL","toDataURL","saveBtn","href","draw","obj","rand","red","blue","green","alpha","setColour","xpos","ypos","filler","temp","Math","random","ovA","ctx","round","points","r","maxCols","c","gridWidth","maxRows","gridHeight","cellSize","moveTo","x","y","lineTo","generatePoints","amount","row","col","variance","push","pointFun","drawOnly","cRange","vRange","ceil","oAmount","loader","style","display","cvs2","numColours","addEventListener","getContext","setSize","w","h","setCols","createElement","type","id","appendChild","window","setTimeout","innerHTML","tempw","temph"],"mappings":"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","file":"main.min.js","sourcesContent":["(function () {\r\n\r\n'use strict';\r\n\r\nvar cvs,//canvas\r\n\tctx,//canvas context\r\n\tgridWidth,//draw width (2 cells wider than the actual canvas)\r\n\tgridHeight,//draw height (2 cells taller than the actual canvas)\r\n\tvRange,\r\n\tcRange,\r\n\tmaxCols,\r\n\tmaxRows,\r\n\toAmount,\r\n\timgd,imge,\r\n\tbase_image,\r\n\tsaveBtn,\r\n\tcvs2,\r\n\tctx2,\r\n\tloader,\r\n\tnumColours;\r\nvar points = [];\r\nvar cellSize = 50;//size of a single grid square\r\nvar variance = 0.2;\r\nvar ovA = 0.5;\r\nvar colours = [\"#22bbee\",\"#8855cc\",\"#ee2266\",\"#ee7722\"];\r\n\r\nfunction init () {\r\n\t//Add on load scripts\r\n\tcvs = document.getElementById(\"canvas\");\r\n\tcRange = document.getElementById(\"cell-size\");\r\n\tvRange = document.getElementById(\"variance\");\r\n\toAmount = document.getElementById(\"oamount\");\r\n\tsaveBtn = document.getElementById('save');\r\n\tctx = cvs.getContext(\"2d\");\r\n\tcvs2 = document.getElementById(\"canvas2\");\r\n\tctx2 = cvs2.getContext(\"2d\");\r\n\tnumColours = document.getElementById(\"numColours\");\r\n\r\n\tvar setSize = function(w,h) {\r\n\t\tcvs.width = w;\r\n\t\tcvs.height = h;\r\n\r\n\t\tgridWidth = cvs.width+cellSize*2;\r\n\t\tgridHeight = cvs.height+cellSize*2;\r\n\r\n\t\tcvs2.width = cvs.width;\r\n\t\tcvs2.height = cvs.height;\r\n\t}\r\n\r\n\tvar setCols = function() {\r\n\t\tfor (var i = 0; i < numColours.value; i++) {\r\n\t\t\tvar temp = document.createElement(\"input\");\r\n\t\t\ttemp.type = \"color\";\r\n\t\t\ttemp.id = \"colour\" +(i+1);\r\n\r\n\t\t\tdocument.getElementById(\"colour-div\").appendChild(temp);\r\n\t\t\ttemp.value = colours[i];\r\n\t\t\ttemp.addEventListener(\"change\",function () {\r\n\t\t\t\t//document.getElementById(\"colour-div\").innerHTML = \"\";\r\n\t\t\t\t//setCols();\r\n\t\t\t\tdrawBG(ctx2,cvs2);\r\n\t\t\t\tloader.style.display = \"\";\r\n\t\t\t\tvar blob = window.setTimeout(function () {\r\n\t\t\t\t\tpointFun();\r\n\t\t\t\t},2);\r\n\t\t\t},false);\r\n\t\t}\r\n\t}\r\n\r\n\tsetCols();\r\n\r\n\tsetSize(1280,720);\r\n\t//base_image = new Image();\r\n\t//base_image.crossOrigin = \"Anonymous\";\r\n\t//base_image.src = 'download.png';\r\n\t//base_image.onload = function () {\r\n\t\tdrawBG(ctx2,cvs2);\r\n\t\tloader = document.getElementById(\"loader\");\r\n\t\tpointFun();\r\n\t//}\r\n\tvar tout = 0;\r\n\tnumColours.addEventListener(\"change\",function () {\r\n\t\tdocument.getElementById(\"colour-div\").innerHTML = \"\";\r\n\t\tsetCols();\r\n\t\tdrawBG(ctx2,cvs2);\r\n\t\tloader.style.display = \"\";\r\n\t\tvar blob = window.setTimeout(function () {\r\n\t\t\tpointFun();\r\n\t\t},tout);\r\n\t},false);\r\n\tcRange.addEventListener(\"change\",function () {\r\n\t\tloader.style.display = \"\";\r\n\t\tvar blob = window.setTimeout(function () {\r\n\t\t\tpointFun();\r\n\t\t},tout);\r\n\t},false);\r\n\tvRange.addEventListener(\"change\",function () {\r\n\t\tloader.style.display = \"\";\r\n\t\tvar blob = window.setTimeout(function () {\r\n\t\t\tpointFun();\r\n\t\t},tout);\r\n\t},false);\r\n\toAmount.addEventListener(\"change\",function () {\r\n\t\tloader.style.display = \"\";\r\n\t\tvar blob = window.setTimeout(function () {\r\n\t\t\tpointFun(true);\r\n\t\t},tout);\r\n\t},false);\r\n\r\n\tvar sizeBtn = document.getElementById('size-btn');\r\n\tsizeBtn.addEventListener(\"click\",function () {\r\n\t\tvar tempw = document.getElementById('width').value;\r\n\t\tvar temph = document.getElementById('height').value;\r\n\t\tsetSize(tempw,temph);\r\n\t\tconsole.log(tempw +\" : \"+ temph)\r\n\t\tpointFun();\r\n\t})\r\n\r\n\t//saveBtn.addEventListener(\"click\",saveImage,false);\r\n}\r\n//Particle constructor\r\nfunction point () {\r\n\t/*this.x = Math.random()*cvs.width;;\r\n\tthis.y = Math.random()*cvs.height;\r\n\tthis.vx = (Math.random()*2)-1;\r\n\tthis.vy = (Math.random()*2)-1;*/\r\n\t//points.push(this);\r\n}\r\n\r\nfunction drawBG(context,canvas) {\r\n\tcontext.clearRect(0, 0, cvs.width, cvs.height);\r\n\tcontext.globalCompositeOperation = \"multiply\";\r\n\tvar bg = context.createLinearGradient(0,0,canvas.width,0);\r\n\r\n\t//Duskish gradient\r\n\t/*bg.addColorStop(0,\"#0e1b32\");\r\n\tbg.addColorStop(0.8,\"#c28993\");\r\n\tbg.addColorStop(1,\"#ffc7af\");*/\r\n\r\n\t//Pink/Purple Gradient\r\n\t/*bg.addColorStop(0,\"#85c\");\r\n\tbg.addColorStop(1,\"#d14\");*/\r\n\r\n\t//Whitish\r\n\t/*bg.addColorStop(0,\"#f8f8f8\");\r\n\tbg.addColorStop(1,\"#ddd\");*/\r\n\tvar inputs = document.getElementById(\"colour-div\").getElementsByTagName('input');\r\n\t//console.log(inputs.length);\r\n\tfor (var i = 0; i < inputs.length; i++) {\r\n\t\tif (inputs.length > 1) {\r\n\t\t\tbg.addColorStop(i/(inputs.length-1),inputs[i].value);\r\n\t\t\tconsole.log(inputs[i].value);\r\n\t\t}else{\r\n\t\t\tbg = inputs[i].value;\r\n\t\t}\r\n\t\tcolours[i] = inputs[i].value;\r\n\t}\r\n\r\n\tcontext.fillStyle = bg;\r\n\tcontext.beginPath();\r\n\tcontext.fillRect(0,0,canvas.width,canvas.height);\r\n\tcontext.closePath();\r\n\tcontext.fill();\r\n\r\n\tcontext.beginPath();\r\n\tvar bg2 = context.createLinearGradient(0,0,0,cvs.height);\r\n\tbg2.addColorStop(0,\"#fff\");\r\n\tbg2.addColorStop(1,\"#ccc\");\r\n\tcontext.fillStyle = bg2;\r\n\tcontext.fillRect(0,0,cvs.width,cvs.height);\r\n\tcontext.closePath();\r\n\tcontext.fill();\r\n\tcontext.globalCompositeOperation = \"source-over\";\r\n\t//ctx.drawImage(base_image, 0, 0);\r\n\tif (context == ctx2) {imgd = context;}\r\n\telse if (imgd.getImageData(0, 0, 1, 1).data[3] < 255 || imgd.getImageData(canvas.width-1, canvas.height-1, 1, 1).data[3] < 255) {\r\n\t\tcontext.clearRect(0,0,canvas.width,canvas.height);\r\n\t}\r\n\t\r\n\r\n}\r\n\r\nfunction saveImage() {\r\n\t// body...\r\n\tvar dataURL = canvas.toDataURL();\r\n\tsaveBtn.href = dataURL;\r\n}\r\n\r\nfunction draw (obj,rand) {\r\n\r\n\tvar red,blue,green,alpha;\r\n\r\n\tvar setColour = function (xpos,ypos) {\r\n\t\tif (xpos < 0) {\r\n\t\t\txpos = 0;\r\n\t\t}\r\n\t\tif (xpos > cvs.width-1) {\r\n\t\t\txpos = cvs.width-1;\r\n\t\t}\r\n\t\tif (ypos < 0) {\r\n\t\t\typos = 0;\r\n\t\t}\r\n\t\tif (ypos > cvs.height-1) {\r\n\t\t\typos = cvs.height-1;\r\n\t\t}\r\n\t\tred = imgd.getImageData(xpos, ypos, 1, 1).data[0];\r\n\t\tgreen = imgd.getImageData(xpos, ypos, 1, 1).data[1];\r\n\t\tblue = imgd.getImageData(xpos, ypos, 1, 1).data[2];\r\n\t\talpha = imgd.getImageData(xpos, ypos, 1, 1).data[3];\r\n\t\t\r\n\t}\r\n\r\n\tvar filler = function () {\r\n\t\tif(rand){\r\n\t\t\tvar temp = (Math.random()*2*ovA)-ovA;\r\n\t\t\tctx.fillStyle = \"rgba(\"+Math.round(red-red*temp)+\", \"+Math.round(green-green*temp)+\", \"+Math.round(blue-blue*temp)+\", \"+alpha/255+\")\";\r\n\t\t} else {\r\n\t\t\tctx.fillStyle = \"rgba(\"+red+\", \"+green+\", \"+blue+\", \"+alpha/255+\")\";\r\n\t\t}\r\n\t}\r\n\t\r\n\tfor (var i = 0; i < points.length; i++) {\r\n\t\tif (obj == points[i] && obj.r % 2 == 0 && points[i+maxCols+1] && obj.c < maxCols-1) {\r\n\t\t\t//setColour(obj.x,obj.y+2*cellSize/3);\r\n\t\t\tsetColour(Math.round(obj.c/maxCols*gridWidth),Math.round(obj.r/maxRows*gridHeight+2*cellSize/3));\r\n\t\t\tfiller();\r\n\t\t\t//console.log(obj.c);\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.moveTo(obj.x,obj.y);\r\n\t\t\tctx.lineTo(points[i+maxCols].x,points[i+maxCols].y);\r\n\t\t\tctx.lineTo(points[i+maxCols+1].x,points[i+maxCols+1].y);\r\n\t\t\tctx.closePath();\r\n\t\t\tctx.fill();\r\n\t\t\t//ctx.stroke();\r\n\r\n\t\t\t//setColour(obj.x+cellSize/2,obj.y+cellSize/3);\r\n\t\t\tsetColour(Math.round(obj.c/maxCols*gridWidth+cellSize/2),Math.round(obj.r/maxRows*gridHeight+cellSize/3));\r\n\t\t\tfiller();\r\n\t\t\t//ctx.fillStyle = \"green\";\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.moveTo(obj.x,obj.y);\r\n\t\t\tctx.lineTo(points[i+1].x,points[i+1].y);\r\n\t\t\tctx.lineTo(points[i+maxCols+1].x,points[i+maxCols+1].y);\r\n\t\t\tctx.closePath();\r\n\t\t\tctx.fill();\r\n\t\t\t//console.log(\"YES\");\r\n\t\t}\r\n\t\tif (obj == points[i] && obj.r % 2 != 0 && points[i+maxCols+1] && obj.c > 0) {\r\n\r\n\t\t\t//setColour(obj.x-cellSize/2,obj.y+cellSize/3);\r\n\t\t\tsetColour(Math.round((obj.c-1)/maxCols*gridWidth),Math.round(obj.r/maxRows*gridHeight+cellSize/3));\r\n\t\t\t//if (!setColour(Math.round((obj.c-1)/maxCols*gridWidth),200)) {console.log(obj)}\r\n\t\t\tfiller();\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.moveTo(obj.x,obj.y);\r\n\t\t\tctx.lineTo(points[i-1].x,points[i-1].y);\r\n\t\t\tctx.lineTo(points[i+maxCols-1].x,points[i+maxCols-1].y);\r\n\t\t\tctx.closePath();\r\n\t\t\tctx.fill();\r\n\t\t\t//ctx.stroke();\r\n\r\n\t\t\t//setColour(obj.x,obj.y+2*cellSize/3);\r\n\t\t\tsetColour(Math.round((obj.c-1)/maxCols*gridWidth+cellSize/2),Math.round(obj.r/maxRows*gridHeight+2*cellSize/3));\r\n\t\t\tfiller();\r\n\t\t\t//ctx.fillStyle = \"green\";\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.moveTo(obj.x,obj.y);\r\n\t\t\tctx.lineTo(points[i+maxCols-1].x,points[i+maxCols-1].y);\r\n\t\t\tctx.lineTo(points[i+maxCols].x,points[i+maxCols].y);\r\n\t\t\tctx.closePath();\r\n\t\t\tctx.fill();\r\n\t\t\t//console.log(\"NO\");\r\n\t\t}\r\n\t}\r\n}\r\n//Point generator\r\nfunction generatePoints (amount) {\r\n\tpoints = [];\r\n\tvar temp;\r\n\tvar row = 0;\r\n\tvar col = 0;\r\n\tfor (var i = 0; i < amount; i++) {\r\n\t\ttemp = new point();\r\n\t\tif (row % 2 == 0) {\r\n\t\t\ttemp.x = (col*cellSize)-cellSize;\r\n\t\t\ttemp.x = temp.x + (Math.random()-.5)*variance*cellSize*2;\r\n\t\t} else {\r\n\t\t\ttemp.x = (col*cellSize)-cellSize-cellSize/2;\r\n\t\t\ttemp.x = temp.x + (Math.random()-.5)*variance*cellSize*2;\r\n\t\t}\r\n\t\ttemp.y = (row*cellSize*0.866)-cellSize;\r\n\t\ttemp.y = temp.y + (Math.random()-.5)*variance*cellSize*2;\r\n\t\ttemp.r = row;\r\n\t\ttemp.c = col;\r\n\t\tpoints.push(temp);\r\n\t\tcol = col + 1;\r\n\t\tif ((i+1) % maxCols == 0) {\r\n\t\t\trow = row + 1;\r\n\t\t\tcol = 0;\r\n\t\t}\r\n\t}\r\n\t//console.log(points);\r\n}\r\n\r\nfunction addRand (a,b) {\r\n\treturn (Math.random()*b*a-(b/2))\r\n}\r\n\r\nfunction pointFun (drawOnly) {\r\n\tif(drawOnly === true){\r\n\t\t//do nothing\r\n\t}else{\r\n\t\tcellSize = (cRange.value*2)+10;\r\n\t\tvariance = vRange.value/100;\r\n\t\tgridWidth = cvs.width+cellSize*2;\r\n\t\tgridHeight = cvs.height+cellSize*2;\r\n\t\tmaxCols = Math.ceil(gridWidth / cellSize)+2;\r\n\t\tmaxRows = Math.ceil(gridHeight / (cellSize*0.865))\r\n\t\t//console.log(maxCols);\r\n\t\tvar x = maxCols;\r\n\t\tvar y = maxRows;\r\n\t\tgeneratePoints(x*y);\r\n\t}\r\n\tovA = oAmount.value/100;\r\n\tctx.clearRect(0, 0, cvs.width, cvs.height);\r\n\tdrawBG(ctx,cvs);\r\n\tfor (var i = 0; i < points.length; i++) {\r\n\t\tdraw(points[i],true);\r\n\t};\r\n\tsaveImage();\r\n\tloader.style.display = \"none\";\r\n}\r\n\r\n//Execute when DOM has loaded\r\ndocument.addEventListener('DOMContentLoaded',init,false);\r\n\r\n})();"]}