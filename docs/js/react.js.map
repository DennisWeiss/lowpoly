{"version":3,"sources":["helpers.js","Controls.jsx","Header.jsx","Display.jsx","App.jsx"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxfile":"react.js","sourcesContent":["// Helpers\r\nexport function uuid(len) {\r\n    let length = len || 6;\r\n    let charCodes = [];\r\n    let string = '';\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n        charCodes.push(48 + i);\r\n        charCodes.push(97 + i);\r\n    }\r\n    for (let i = 0; i < 16; i++) {\r\n        charCodes.push(107 + i);\r\n    }\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        let charIndex = Math.floor(Math.random() * charCodes.length);\r\n        string = string + String.fromCharCode(charCodes[charIndex]);\r\n    }\r\n\r\n    return string;\r\n}","import React from 'react';\r\n\r\nexport default class Controls extends React.Component {\r\n    render() {\r\n        let settings = this.props.settings;\r\n        let presets = this.props.presets;\r\n        let setDimensions = this.props.setDimensions.bind(this);\r\n\r\n        return (\r\n            <section className=\"controls\">\r\n                <DimensionControls\r\n                    settings={settings.dimension}\r\n                    presets={presets}\r\n                    setDimensions={setDimensions} />\r\n                <GeometryControls\r\n                    settings={settings.geometry} />\r\n                <ColourControls\r\n                    settings={settings.colour} />\r\n                <div className=\"section\">\r\n                    <a id=\"save\" className=\"button\" download=\"lowpoly.png\">Download Image</a>\r\n                </div>\r\n\r\n            </section>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <header className=\"topbar\">\r\n                <ul>\r\n                    <li><h1>Low Poly Background</h1></li>\r\n                    <li><a href=\"https://github.com/cojdev\">Github</a></li>\r\n                    <li><a href=\"https://codepen.io/charleso\">CodePen</a></li>\r\n                </ul>\r\n            </header>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Display extends React.Component {\r\n    componentDidMount() {\r\n        const cvs = this.refs.canvas1,\r\n            cvs2 = this.refs.canvas2;\r\n        \r\n        const ctx = cvs.getContext('2d'),\r\n            ctx2 = cvs2.getContext('2d');\r\n        \r\n    }\r\n\r\n    drawCanvas(canvas, canvas2) {\r\n        const drawGradient = function (context, canvas) {\r\n\r\n            const self = this;\r\n\r\n            context.clearRect(0, 0, canvas.width, canvas.height);\r\n            context.globalCompositeOperation = \"multiply\";\r\n            var gradient = context.createLinearGradient(0, 0, canvas.width, 0);\r\n    \r\n            // Duskish gradient\r\n            // dusk = {\r\n            // \tcolours: [\"#0e1b32\",\"#c28993\",\"#ffc7af\"],\r\n            // \tstops: [0, 0.8, 1]\r\n            // };\r\n            \r\n            // draw gradient\r\n            var inputs = [\"#0e1b32\", \"#c28993\", \"#ffc7af\"];\r\n            for (var i = 0; i < inputs.length; i++) {\r\n                if (inputs.length > 1) {\r\n                    gradient.addColorStop(i / (inputs.length - 1), inputs[i]);\r\n                    console.log(inputs[i]);\r\n                } else {\r\n                    gradient = inputs[i];\r\n                }\r\n                colours[i] = inputs[i];\r\n            }\r\n            context.fillStyle = gradient;\r\n            context.beginPath();\r\n            context.fillRect(0, 0, canvas.width, canvas.height);\r\n            context.closePath();\r\n            context.fill();\r\n            \r\n\r\n            context.beginPath();\r\n            var overlay = context.createLinearGradient(0, 0, 0, cvs.height);\r\n            overlay.addColorStop(0, \"#fff\");\r\n            overlay.addColorStop(1, \"#ccc\");\r\n            context.fillStyle = overlay;\r\n            context.fillRect(0, 0, cvs.width, cvs.height);\r\n            context.closePath();\r\n            context.fill();\r\n            context.globalCompositeOperation = \"source-over\";\r\n\r\n            // use image instead of gradient\r\n            // ctx.drawImage(base_image, 0, 0);\r\n\r\n            // hidden canvas\r\n            if (context == self.ctx2) { imgd = context; }\r\n\r\n            // \r\n            else if (imgd.getImageData(0, 0, 1, 1).data[3] < 255 || imgd.getImageData(canvas.width - 1, canvas.height - 1, 1, 1).data[3] < 255) {\r\n                context.clearRect(0, 0, canvas.width, canvas.height);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const width = this.props.width,\r\n            height = this.props.height;\r\n\r\n        return (\r\n            <div\r\n                className=\"display\">\r\n                <canvas\r\n                    ref=\"canvas1\"\r\n                    className=\"canvas1\"\r\n                    width={width}\r\n                    height={height}></canvas>\r\n                <canvas\r\n                    ref='canvas2'\r\n                    className=\"canvas2\"\r\n                    width={width}\r\n                    height={height}></canvas>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\n// Components\r\nimport Header from './Header';\r\nimport Display from './Display';\r\nimport Controls from './Controls';\r\n\r\n// Helpers\r\nimport uuid from './lib/helpers';\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n\r\n            defaults: {\r\n                dimension: {\r\n                    width: 1280,\r\n                    height: 720,\r\n                },\r\n\r\n                geometry: {\r\n                    variance: 40,\r\n                    cellSize: 40,\r\n                    depth: 40,\r\n                },\r\n                \r\n                colour: [\"#22bbee\", \"#8855cc\", \"#ee2266\", \"#ee7722\"]\r\n            },\r\n\r\n            presets: [\r\n                {\r\n                    width:1280,\r\n                    height: 720,\r\n                    label: '1280x720',\r\n                },\r\n                {\r\n                    width:1366,\r\n                    height: 768,\r\n                    label: '1366x768',\r\n                },\r\n                {\r\n                    width:1920,\r\n                    height: 1080,\r\n                    label: '1920x1080',\r\n                },\r\n                {\r\n                    width:3840,\r\n                    height: 2160,\r\n                    label: '3840x2160 (4K)',\r\n                },\r\n                {\r\n                    width:640,\r\n                    height: 1152,\r\n                    label: 'iPhone 5/5s',\r\n                },\r\n                {\r\n                    width:750,\r\n                    height: 1334,\r\n                    label: 'iPhone 6/7/8',\r\n                },\r\n                {\r\n                    width:1080,\r\n                    height: 1920,\r\n                    label: 'iPhone 6+/7+/8+',\r\n                },\r\n            ],\r\n\r\n            settings: {}\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        let defaults = JSON.parse(JSON.stringify(this.state.defaults));\r\n        this.setState({ settings: defaults });\r\n    }\r\n\r\n    setDimensions(obj) {\r\n        console.log('setDimensions');\r\n        this.setState({dimensions: obj});\r\n    }\r\n\r\n    render() {\r\n        \r\n        const settings = this.state.settings;\r\n        const presets = this.state.presets;\r\n\r\n        return (\r\n            <div\r\n                className=\"container\">\r\n                <Header />\r\n                <Display\r\n                    height={this.state.dimensions.height}\r\n                    width={this.state.dimensions.width} />\r\n                <Controls\r\n                    settings={this.state.settings}\r\n                    presets={this.state.presets}\r\n                    setDimensions={this.setDimensions.bind(this)} />\r\n            </div>\r\n        );\r\n    }\r\n}"]}